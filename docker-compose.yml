version: '3.8'

services:
  # Main FPL ML System application
  fpl-system:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fpl-ml-system
    ports:
      - "8501:8501"  # Streamlit dashboard
      - "8000:8000"  # CLI API (if implemented)
    environment:
      - DATABASE_URL=postgresql://fpl_user:fpl_password@postgres:5432/fpl_db
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - LOG_STRUCTURED=true
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FPL_TEAM_ID=${FPL_TEAM_ID}
      - FPL_EMAIL=${FPL_EMAIL}
      - FPL_PASSWORD=${FPL_PASSWORD}
      - ENVIRONMENT=production
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "from src.utils.monitoring import get_system_monitor; print('healthy' if get_system_monitor().health_checker else 'unhealthy')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - fpl-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: fpl-postgres
    environment:
      - POSTGRES_DB=fpl_db
      - POSTGRES_USER=fpl_user
      - POSTGRES_PASSWORD=fpl_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fpl_user -d fpl_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fpl-network

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: fpl-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - fpl-network

  # Background task scheduler (optional)
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fpl-scheduler
    command: python -m src.scheduler
    environment:
      - DATABASE_URL=postgresql://fpl_user:fpl_password@postgres:5432/fpl_db
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=production
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
    depends_on:
      - postgres
      - redis
      - fpl-system
    restart: unless-stopped
    networks:
      - fpl-network

  # Monitoring (Prometheus - optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: fpl-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - fpl-network
    profiles:
      - monitoring

  # Grafana dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: fpl-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - fpl-network
    profiles:
      - monitoring

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: fpl-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - fpl-system
    restart: unless-stopped
    networks:
      - fpl-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  fpl-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16