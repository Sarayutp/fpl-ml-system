[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fpl-ml-system"
version = "1.0.0"
description = "AI-powered Fantasy Premier League management system using Pydantic AI agents and machine learning"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "FPL ML System", email = "fpl@example.com"}
]
keywords = ["fantasy-football", "machine-learning", "pydantic-ai", "optimization", "fpl"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment :: Sports",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.9"
dependencies = [
    "pydantic-ai>=0.0.14",
    "pydantic>=2.10.0", 
    "pydantic-settings>=2.7.0",
    "python-dotenv>=1.0.0",
    "scikit-learn>=1.5.0",
    "xgboost>=2.1.0",
    "tensorflow>=2.18.0",
    "pandas>=2.2.0",
    "numpy>=2.1.0",
    "pulp>=2.9.0",
    "httpx>=0.28.0",
    "requests>=2.32.0",
    "beautifulsoup4>=4.12.0",
    "aiohttp>=3.11.0",
    "click>=8.1.0",
    "rich>=13.9.0",
    "streamlit>=1.41.0",
    "plotly>=5.24.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.14.0",
    "redis>=5.2.0",
    "loguru>=0.7.0",
    "schedule>=1.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "pre-commit>=4.0.0",
    "jupyterlab>=4.3.0",
    "ipython>=8.30.0",
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
]

[project.urls]
Homepage = "https://github.com/example/fpl-ml-system"
Documentation = "https://github.com/example/fpl-ml-system/docs"
Repository = "https://github.com/example/fpl-ml-system"
Issues = "https://github.com/example/fpl-ml-system/issues"

[project.scripts]
fpl = "src.cli.main:main"
fpl-dashboard = "src.dashboard.app:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml", "*.txt", "*.md"]

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",   # line too long, handled by line-length
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "W191",   # indentation contains tabs
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_returns = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "tensorflow.*",
    "xgboost.*",
    "pulp.*",
    "streamlit.*",
    "plotly.*",
    "sklearn.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q"
testpaths = ["tests"]
asyncio_mode = "auto"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*", 
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"